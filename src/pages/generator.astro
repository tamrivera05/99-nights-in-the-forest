---
import Layout from "../layouts/Layout.astro";
import backgroundImage from "../assets/backgroundImage.png";
import chainsaw from "../assets/Chainsaw.png";
import bandage from "../assets/Bandage.png";
import diamonds from "../assets/Diamonds.png";
import hammer from "../assets/Hammer.png";
import raygun from "../assets/Raygun.png";
import bloodDrip from "../assets/bloodDrip.gif";

const items = [
  {
    id: "chainsaw",
    name: "Chainsaw",
    category: "Tool",
    categoryColor: "#09a9e9",
    categoryBackground: "#05506e",
    description:
      "Allows players to cut trees and eliminate threats quickly. It takes 2 hits to fell a tree and can chop big trees in 25+ hits.",
    image: chainsaw
  },
  {
    id: "raygun",
    name: "Ray Gun",
    category: "Weapon",
    categoryColor: "#ff5c5c",
    categoryBackground: "#981c1c",
    description:
      "Fires hit-scan projectiles that deal heavy damage. Powered by Alien Tech Energy unlike other ranged weapons.",
    image: raygun
  },
  {
    id: "diamonds5k",
    name: "5000 Diamonds",
    category: "Diamonds",
    categoryColor: "#5c12bd",
    categoryBackground: "#ba86ff",
    description:
      "A massive amount of diamonds that lets you gear up faster and stay ahead in the forest.",
    image: diamonds
  },
  {
    id: "diamonds10k",
    name: "10000 Diamonds",
    category: "Diamonds",
    categoryColor: "#5c12bd",
    categoryBackground: "#ba86ff",
    description:
      "Enough currency to unlock the best items in a single run. Use it wisely.",
    image: diamonds
  },
  {
    id: "bandage",
    name: "Bandage",
    category: "Tool",
    categoryColor: "#09a9e9",
    categoryBackground: "#05506e",
    description:
      "Quickly recover health or help fallen teammates. Essential for late-night encounters.",
    image: bandage
  },
  {
    id: "hammer",
    name: "Hammer",
    category: "Tool",
    categoryColor: "#09a9e9",
    categoryBackground: "#05506e",
    description:
      "Move structures around camp and collect decorations scattered across the map effortlessly.",
    image: hammer
  },
];

const loadingMessages = [
  "Something stirs beneath the leaves..",
  "Crafting your free items...",
  "The forest is whispering...",
  "Prepare it's almost ready...",
];
---

<Layout
  title="Item Generator"
  description="Claim Roblox items for survival in 99 Nights in the Forest. Choose an item, enter your username, and get a free code."
  showFooter={false}
>
  <main class="relative flex min-h-screen flex-col items-center overflow-hidden bg-[linear-gradient(180deg,#000f15_0%,#000000_100%)] px-4 py-0 pt-[130px] md:pt-[150px]">
    <div class="pointer-events-none absolute inset-0 overflow-hidden">
      <div class="absolute inset-0 bg-[radial-gradient(circle_at_center,#042739_0%,#01171f_55%,#000000_100%)]" />
      <div class="absolute left-1/2 top-1/2 h-[110%] w-[110%] -translate-x-1/2 -translate-y-1/2 overflow-hidden blur-[5px]">
        <img src={backgroundImage.src} alt="" class="h-full w-full object-cover" />
      </div>
      <div class="absolute inset-0 bg-black/35" />
    </div>

    <div class="relative z-10 flex w-full max-w-[1200px] flex-1 flex-col items-center gap-6 pb-12">

      <section class="flex w-full flex-1 flex-col items-center gap-6 text-white">
        <div class="relative flex w-full max-w-[980px] flex-col items-center gap-6 rounded-[20px] bg-black/45 px-6 py-8 shadow-[0_12px_28px_rgba(0,0,0,0.45)] backdrop-blur-lg sm:px-10 sm:py-10">
          <div data-header class="flex flex-col items-center gap-2 text-center">
            <h1 class="text-[36px] font-bold tracking-[-0.48px] text-[#950606] sm:text-[40px]">Get Free Items</h1>
            <p class="max-w-[540px] text-[18px] font-semibold tracking-[-0.36px] text-white/85">
              Claim weapons, tools, and diamonds for survival.
            </p>
          </div>

          <div data-progress-container class="flex w-full flex-col gap-2" data-progress-visible>
            <div class="flex items-center justify-between text-[12px] tracking-[-0.24px] text-white/60">
              <span data-progress-status>Step 1 of 3</span>
              <span data-progress-label>Select an Item</span>
            </div>
            <div class="h-3 w-full rounded-full bg-white/20">
              <div data-progress-active class="h-3 w-1/3 rounded-full bg-[#950606] transition-all duration-500" />
            </div>
          </div>

          <div class="w-full">
            <form class="flex w-full flex-col gap-10" data-generator-form>
              <div data-step="1" class="flex flex-col gap-6">
                <h2 class="text-[26px] font-bold tracking-[-0.48px]">Choose your Free Item</h2>
                <div class="grid gap-5 sm:grid-cols-2 lg:grid-cols-3">
                  {items.map((item) => (
                    <button
                      type="button"
                      data-item-id={item.id}
                      class="group relative flex h-full flex-col gap-4 rounded-[12px] border border-white/15 bg-[rgba(0,0,0,0.65)] p-5 text-left shadow-[0_8px_20px_rgba(0,0,0,0.35)] transition-all duration-300 hover:-translate-y-1 hover:border-[#950606] hover:shadow-[0_12px_26px_rgba(149,6,6,0.25)] focus:outline-none"
                    >
                      <div class="relative flex h-36 w-full items-center justify-center rounded-[10px] bg-[radial-gradient(circle_at_center,rgba(149,6,6,0.45),rgba(0,0,0,0.9))] text-[42px] font-black uppercase text-white/20">
                        <img src={item.image?.src} alt={item.name} class="h-full w-auto object-contain" />
                      </div>
                      <div class="flex flex-col gap-3">
                        <div class="flex items-center justify-between gap-3">
                          <h3 class="text-[20px] font-semibold tracking-[-0.4px] text-white">{item.name}</h3>
                          <span
                            class="rounded-[8px] px-3 py-1 text-[12px] font-semibold tracking-[-0.24px]"
                            style={{
                              background: item.categoryBackground,
                              color: item.categoryColor,
                            }}
                          >
                            {item.category}
                          </span>
                        </div>
                        <p class="text-[13px] leading-[1.5] text-white/70">{item.description}</p>
                      </div>
                      <div class="mt-auto flex items-center justify-center">
                        <span class="flex w-full items-center justify-center rounded-[8px] bg-[#950606] px-4 py-[10px] text-[13px] font-semibold tracking-[0.04em] text-white transition-colors group-hover:bg-[#b00a0a]">
                          Select Item
                        </span>
                      </div>
                      <span class="pointer-events-none absolute inset-0 rounded-[12px] border-2 border-transparent transition-[border-color,box-shadow] duration-300" data-selected-indicator />
                    </button>
                  ))}
                </div>
              </div>

              <div data-step="2" class="hidden flex-col gap-6">
                <h2 class="text-[26px] font-bold tracking-[-0.48px]">Enter your Roblox Username</h2>
                <div class="flex flex-col gap-4">
                  <label class="flex flex-col gap-2 text-[14px] font-semibold text-white/70" for="generator-username">
                    Roblox Username
                    <input
                      id="generator-username"
                      name="username"
                      type="text"
                      placeholder="Roblox username"
                      autocomplete="username"
                      class="h-12 rounded-[10px] border border-white/20 bg-black/40 px-4 text-[16px] font-medium text-white outline-none transition-all focus:border-[#950606] focus:ring-2 focus:ring-[#950606]/40"
                      required
                    />
                  </label>
                  <div class="flex flex-wrap items-center justify-between gap-3 text-[13px] text-white/50">
                    <p>Ensure the username is exact. Typos may block your rewards.</p>
                  </div>
                </div>
                <div class="flex flex-col gap-3 sm:flex-row sm:justify-end">
                  <button type="button" data-action="back" class="rounded-[10px] border border-white/20 px-4 py-3 text-[14px] font-semibold text-white transition hover:border-white/40">
                    Back
                  </button>
                  <button
                    type="button"
                    data-action="continue"
                    class="rounded-[10px] bg-[#950606] px-6 py-3 text-[15px] font-semibold uppercase tracking-[0.08em] text-white shadow-[0_5px_16px_rgba(149,6,6,0.35)] transition hover:bg-[#b00a0a] disabled:cursor-not-allowed disabled:bg-[#3d1515] disabled:text-white/40"
                    disabled
                  >
                    Continue
                  </button>
                </div>
              </div>

              <div data-step="3" class="hidden flex-col gap-6">
                <h2 class="text-[26px] font-bold tracking-[-0.48px]">Review your details</h2>
                <div class="flex flex-col gap-4 rounded-[16px] border border-white/15 bg-black/60 p-6 shadow-[0_12px_20px_rgba(0,0,0,0.35)]">
                  <div class="flex flex-col gap-3 rounded-[12px] border border-white/15 bg-black/40 p-5">
                    <div class="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
                      <div>
                        <p class="text-[15px] text-white/60">Selected Item</p>
                        <p data-review-item class="text-[20px] font-semibold tracking-[-0.4px] text-white">â€”</p>
                      </div>
                      <span data-review-category class="rounded-[8px] px-3 py-1 text-[12px] font-semibold tracking-[-0.24px] text-white/70">â€”</span>
                    </div>
                    <p data-review-description class="text-[13px] text-white/60">â€”</p>
                  </div>
                  <div class="flex flex-col gap-2 rounded-[12px] border border-[#dcbb02] bg-[#4b4001]/80 p-5 text-[#ffe88b]">
                    <p class="text-[16px] font-semibold">Important Notice!</p>
                    <p class="text-[14px] leading-relaxed text-[#fff8c9]">
                      You can only use this once. Please make sure your selections are correct before confirming.
                    </p>
                  </div>
                  <div class="flex flex-wrap items-center justify-between gap-4 rounded-[12px] border border-white/15 bg-black/40 p-5">
                    <div>
                      <p class="text-[15px] text-white/60">Claiming for</p>
                      <p data-review-username class="text-[20px] font-semibold tracking-[-0.4px] text-white">â€”</p>
                    </div>
                    <button type="button" data-action="edit-username" class="rounded-[8px] border border-white/20 px-3 py-2 text-[13px] font-semibold text-white transition hover:border-white/40">
                      Edit Username
                    </button>
                  </div>
                </div>
                <div class="flex flex-col gap-3 sm:flex-row sm:justify-end">
                  <button type="button" data-action="back" class="rounded-[10px] border border-white/20 px-4 py-3 text-[14px] font-semibold text-white transition hover:border-white/40">
                    Back
                  </button>
                  <button
                    type="button"
                    data-action="submit"
                    class="rounded-[10px] bg-[#950606] px-6 py-3 text-[15px] font-semibold uppercase tracking-[0.08em] text-white shadow-[0_5px_16px_rgba(149,6,6,0.35)] transition hover:bg-[#b00a0a]"
                  >
                    Submit
                  </button>
                </div>
              </div>

              <div data-step="4" class="hidden flex-col items-center gap-8">
                <div class="flex flex-col items-center gap-4 text-center">
                  <p
                  data-loading-text
                  class="min-h-[60px] max-w-[440px] text-[22px] font-semibold tracking-[-0.4px] text-white"
                  >
                  Initiating generator...
                </p>
                <div class="relative flex h-60 w-60 items-center justify-center">
                  <img src={bloodDrip.src} alt="Blood Dripping GIF"/>
                </div>
                  <p class="max-w-[460px] text-center text-[14px] text-white/60">
                    Codes may take a few seconds to generate. Please wait patiently while we conjure your reward.
                  </p>
                </div>
                <div class="flex w-full max-w-[520px] flex-col gap-3 rounded-[14px] border border-white/15 bg-black/40 p-6">
                  <div class="h-2 w-full rounded-full bg-white/10">
                    <div data-loading-fill class="h-2 w-0 rounded-full bg-[#950606]" />
                  </div>
                  <p class="text-center text-[13px] text-white/40">Generating access token...</p>
                </div>
              </div>

              <div data-step="5" class="hidden flex-col gap-6">
                <div class="flex flex-col items-center gap-4 text-center">
                  <div class="flex h-20 w-20 items-center justify-center rounded-full border border-[#dcbb02]/60 bg-[#4b4001]/60">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2.4"
                      class="h-10 w-10 text-[#ffe88b]"
                    >
                      <path d="M20 6 9 17l-5-5" />
                    </svg>
                  </div>
                  <div class="space-y-1">
                    <h2 class="text-[28px] font-bold tracking-[-0.48px]">Code Generated Successfully!</h2>
                    <p class="text-[16px] text-white/70">Your free item is ready to claim.</p>
                  </div>
                </div>
                <div class="flex flex-col gap-4 rounded-[16px] border border-white/15 bg-black/60 p-6 shadow-[0_12px_20px_rgba(0,0,0,0.35)]">
                  <div class="flex flex-col gap-1">
                    <p class="text-[15px] text-white/60">Your Code</p>
                    <div class="flex flex-col gap-3 rounded-[10px] border border-[#950606] bg-black/60 px-4 py-5">
                      <p data-generated-code class="text-center text-[32px] font-bold tracking-[0.12em] text-white">
                        â€”
                      </p>
                      <button
                        type="button"
                        data-action="copy"
                        class="rounded-[10px] bg-[#950606] px-4 py-3 text-[14px] font-semibold uppercase tracking-[0.12em] text-white transition hover:bg-[#b00a0a]"
                      >
                        Copy Code
                      </button>
                      <p data-copy-feedback class="text-center text-[12px] font-medium text-[#ffe88b] opacity-0 transition-opacity">
                        Copied to clipboard!
                      </p>
                    </div>
                  </div>
                  <div class="rounded-[12px] border border-[#dcbb02] bg-[#4b4001]/80 p-5 text-[#ffe88b]">
                    <p class="text-[16px] font-semibold">Important Notice!</p>
                    <p class="text-[14px] leading-relaxed text-[#fff8c9]">
                      This code expires in 24 hours. Make sure to redeem it soon!
                    </p>
                  </div>
                </div>
                <div class="flex flex-col gap-3 sm:flex-row sm:justify-center">
                  <button
                    type="button"
                    data-action="restart"
                    class="rounded-[10px] border border-white/20 px-4 py-3 text-[14px] font-semibold text-white transition hover:border-white/40"
                  >
                    Generate Another Item
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </section>
    </div>
  </main>

  <script type="application/json" id="generator-items" set:html={JSON.stringify(items)} />
  <script type="application/json" id="generator-loading-messages" set:html={JSON.stringify(loadingMessages)} />
  <script type="module">
    document.addEventListener("DOMContentLoaded", () => {
      const steps = Array.from(document.querySelectorAll('[data-step]'));
      const progressContainer = document.querySelector('[data-progress-container]');
      const progressVisible = progressContainer?.dataset.progressVisible !== undefined;
      const progressActive = document.querySelector('[data-progress-active]');
      const progressStatus = document.querySelector('[data-progress-status]');
      const progressLabel = document.querySelector('[data-progress-label]');
      const usernameInput = document.querySelector('#generator-username');
      const continueButton = document.querySelector('[data-action="continue"]');
      const submitButton = document.querySelector('[data-action="submit"]');
      const backButtons = Array.from(document.querySelectorAll('[data-action="back"]'));
      const editUsernameButton = document.querySelector('[data-action="edit-username"]');
      const copyButton = document.querySelector('[data-action="copy"]');
      const copyFeedback = document.querySelector('[data-copy-feedback]');
      const restartButton = document.querySelector('[data-action="restart"]');
      const reviewItemEl = document.querySelector('[data-review-item]');
      const reviewDescriptionEl = document.querySelector('[data-review-description]');
      const reviewCategoryEl = document.querySelector('[data-review-category]');
      const reviewUsernameEl = document.querySelector('[data-review-username]');
      const generatedCodeEl = document.querySelector('[data-generated-code]');
      const loadingTextEl = document.querySelector('[data-loading-text]');
      const loadingFillEl = document.querySelector('[data-loading-fill]');
      const itemsData = JSON.parse(document.querySelector('#generator-items')?.textContent || '[]');
      const loadingMessagesData = JSON.parse(document.querySelector('#generator-loading-messages')?.textContent || '[]');

      let currentStep = 1;
      let selectedItemId = null;
      let generatedCode = '';
      let loadingTimeout = null;
      let typingInterval = null;
      let messageTimeout = null;
      let activeMessageIndex = 0;

      const totalProgressSteps = 3;

      const itemButtons = Array.from(document.querySelectorAll('[data-item-id]'));

      function findItem(id) {
        return itemsData.find((item) => item.id === id) || null;
      }

      function updateProgress(step) {
        if (!progressContainer) return;
        if (step <= totalProgressSteps) {
          progressContainer.classList.remove('hidden');
          const percentage = Math.max(0, Math.min(step / totalProgressSteps, 1));
          if (progressActive) {
            progressActive.style.width = `${percentage * 100}%`;
          }
          if (progressStatus) {
            progressStatus.textContent = `Step ${step} of ${totalProgressSteps}`;
          }
          if (progressLabel) {
            const labels = {
              1: 'Select an Item',
              2: 'Enter username',
              3: 'Review details',
            };
            progressLabel.textContent = labels[step] || '';
          }
        } else {
          progressContainer.classList.add('hidden');
        }
      }

      function showStep(step) {
        currentStep = step;
        steps.forEach((section) => {
          const stepNumber = Number(section.dataset.step);
          if (stepNumber === step) {
            section.classList.remove('hidden');
            section.classList.add('flex');
            if (stepNumber === 4) {
              startLoadingSequence();
            }
          } else {
            section.classList.add('hidden');
            section.classList.remove('flex');
          }
        });
        updateProgress(step);
      }

      function highlightSelection() {
        itemButtons.forEach((button) => {
          const indicator = button.querySelector('[data-selected-indicator]');
          const isSelected = button.dataset.itemId === selectedItemId;
          if (indicator) {
            indicator.style.borderColor = isSelected ? '#950606' : 'transparent';
            indicator.style.boxShadow = isSelected
              ? '0 0 0 4px rgba(149,6,6,0.25)'
              : 'none';
          }
          button.setAttribute('aria-pressed', String(isSelected));
        });
      }

      function showStep(step) {
        currentStep = step;

        // Hide or show the header based on the current step
        const header = document.querySelector('[data-header]');
        if (header) {
          if (step === 4 || step === 5) {
            header.classList.add('hidden');
          } else {
            header.classList.remove('hidden');
          }
        }

        steps.forEach((section) => {
          const stepNumber = Number(section.dataset.step);
          if (stepNumber === step) {
            section.classList.remove('hidden');
            section.classList.add('flex');
            if (stepNumber === 4) {
              startLoadingSequence();
            }
          } else {
            section.classList.add('hidden');
            section.classList.remove('flex');
          }
        });

        updateProgress(step);
      }

      function populateReview() {
        const item = findItem(selectedItemId);
        if (!item) return;
        if (reviewItemEl) reviewItemEl.textContent = item.name;
        if (reviewDescriptionEl) reviewDescriptionEl.textContent = item.description;
        if (reviewCategoryEl) {
          reviewCategoryEl.textContent = item.category;
          reviewCategoryEl.style.background = item.categoryBackground;
          reviewCategoryEl.style.color = item.categoryColor;
        }
        if (reviewUsernameEl) reviewUsernameEl.textContent = usernameInput?.value?.trim() || 'â€”';
      }

      function resetLoadingState() {
        if (loadingTimeout) {
          clearTimeout(loadingTimeout);
          loadingTimeout = null;
        }
        if (typingInterval) {
          clearInterval(typingInterval);
          typingInterval = null;
        }
        if (messageTimeout) {
          clearTimeout(messageTimeout);
          messageTimeout = null;
        }
        activeMessageIndex = 0;
        if (loadingFillEl) {
          loadingFillEl.style.transition = 'none';
          loadingFillEl.style.width = '0%';
          // Force reflow to reset the transition when we start again
          void loadingFillEl.offsetWidth;
        }
        if (loadingTextEl) {
          loadingTextEl.textContent = 'Initiating generator...';
        }
      }

      function startTypingCycle() {
        if (!loadingTextEl || !loadingMessagesData.length) return;
        const message = loadingMessagesData[activeMessageIndex];
        let charIndex = 0;
        loadingTextEl.textContent = '';

        typingInterval = setInterval(() => {
          if (!loadingTextEl) return;
          loadingTextEl.textContent = message.slice(0, charIndex + 1);
          charIndex += 1;
          if (charIndex >= message.length) {
            clearInterval(typingInterval);
            typingInterval = null;
            messageTimeout = setTimeout(() => {
              activeMessageIndex = (activeMessageIndex + 1) % loadingMessagesData.length;
              startTypingCycle();
            }, 1800);
          }
        }, 60);
      }

      function startLoadingSequence() {
        resetLoadingState();
        requestAnimationFrame(() => {
          if (loadingFillEl) {
            loadingFillEl.style.transition = 'width 20s linear';
            loadingFillEl.style.width = '100%';
          }
        });
        startTypingCycle();
        loadingTimeout = setTimeout(() => {
          resetLoadingState();
          generateCode();
          showStep(5);
        }, 20000);
      }

      function generateCode() {
        if (generatedCode) return;
        const alphabet = 'ABCDEFGHJKMNPQRSTUVWXYZ23456789';
        const codeLength = 12;
        let code = '';
        for (let i = 0; i < codeLength; i += 1) {
          const index = Math.floor(Math.random() * alphabet.length);
          code += alphabet[index];
        }
        generatedCode = code;
        if (generatedCodeEl) generatedCodeEl.textContent = generatedCode;
      }

      function resetFlow() {
        selectedItemId = null;
        generatedCode = '';
        if (generatedCodeEl) generatedCodeEl.textContent = 'â€”';
        if (copyFeedback) {
          copyFeedback.style.opacity = '0';
        }
        if (usernameInput) {
          usernameInput.value = '';
        }
        highlightSelection();
        updateProgress(1);
        showStep(1);
      }

      itemButtons.forEach((button) => {
        button.addEventListener('click', () => {
          selectedItemId = button.dataset.itemId || null;
          highlightSelection();
          if (!selectedItemId) return;
          setTimeout(() => {
            showStep(2);
          }, 200);
        });
      });

      if (usernameInput && continueButton) {
        usernameInput.addEventListener('input', () => {
          const hasValue = usernameInput.value.trim().length > 0;
          continueButton.disabled = !hasValue;
        });

        continueButton.addEventListener('click', () => {
          if (!selectedItemId) {
            showStep(1);
            return;
          }
          populateReview();
          showStep(3);
        });
      }

      if (submitButton) {
        submitButton.addEventListener('click', () => {
          populateReview();
          showStep(4);
        });
      }

      backButtons.forEach((button) => {
        button.addEventListener('click', () => {
          const fallbackStep = currentStep - 1;
          if (fallbackStep >= 1) {
            showStep(fallbackStep);
          }
        });
      });

      if (editUsernameButton) {
        editUsernameButton.addEventListener('click', () => {
          showStep(2);
          usernameInput?.focus();
        });
      }

      if (copyButton) {
        copyButton.addEventListener('click', async () => {
          if (!generatedCode) return;
          try {
            await navigator.clipboard.writeText(generatedCode);
            if (copyFeedback) {
              copyFeedback.style.opacity = '1';
              setTimeout(() => {
                copyFeedback.style.opacity = '0';
              }, 2000);
            }
          } catch (error) {
            console.error('Copy failed', error);
          }
        });
      }

      if (restartButton) {
        restartButton.addEventListener('click', () => {
          resetFlow();
        });
      }

      showStep(1);
      highlightSelection();
    });
  </script>
</Layout>

